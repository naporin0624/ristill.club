---
description: 
globs: src/themes/**/*.ts,src/themes/**/*.tsx
alwaysApply: false
---
# Themes Directory Guidelines

## Purpose
The `src/themes/` directory manages global styling, design tokens, and theme switching functionality.

## Directory Structure & Responsibilities
```
themes/
├── tokens/
│   ├── colors.css.ts      # Color design tokens
│   ├── spacing.css.ts     # Spacing scale
│   ├── typography.css.ts  # Font definitions
│   └── breakpoints.css.ts # Responsive breakpoints
├── contracts/
│   ├── theme.css.ts       # Theme contract definitions
│   └── variants.css.ts    # Theme variant implementations
├── providers/
│   ├── theme-provider.tsx # React context provider
│   └── theme-context.ts   # Theme context definition
├── reset.css.ts           # Global CSS reset
└── global.css.ts          # Global application styles
```

## Allowed Vanilla Extract Packages
- **@vanilla-extract/css**: Core styling functionality
- **@vanilla-extract/css-utils**: Utility functions
- **@vanilla-extract/dynamic**: Dynamic styling support

## Forbidden Packages
- **@vanilla-extract/recipes**: Do not use - prefer explicit style composition
- **@vanilla-extract/sprinkles**: Do not use - prefer explicit style definitions

## Implementation Guidelines

### Design Tokens
Use theme contracts for consistent design tokens across the application.

#### ✅ Good (theme contract definition)
```typescript
// themes/tokens/colors.css.ts
import { createThemeContract } from '@vanilla-extract/css'

export const colors = createThemeContract({
  primary: null,
  secondary: null,
  background: null,
  text: null,
  border: null,
  surface: null,
})

// themes/tokens/spacing.css.ts
export const spacing = createThemeContract({
  xs: null,
  sm: null,
  md: null,
  lg: null,
  xl: null,
})
```

### Theme Variants
Create theme variants using createTheme for different visual modes.

#### ✅ Good (theme variant implementation)
```typescript
// themes/contracts/theme.css.ts
import { createTheme } from '@vanilla-extract/css'
import { colors } from '../tokens/colors.css'
import { spacing } from '../tokens/spacing.css'

export const lightTheme = createTheme(colors, {
  primary: '#0070f3',
  secondary: '#f4f4f4',
  background: '#ffffff',
  text: '#000000',
  border: '#e1e1e1',
  surface: '#f9f9f9',
})

export const darkTheme = createTheme(colors, {
  primary: '#0070f3',
  secondary: '#333333',
  background: '#000000',
  text: '#ffffff',
  border: '#404040',
  surface: '#1a1a1a',
})

export const baseSpacing = createTheme(spacing, {
  xs: '4px',
  sm: '8px',
  md: '16px',
  lg: '24px',
  xl: '32px',
})
```

### Theme Providers
Create React context providers for theme management.

#### ✅ Good (theme provider implementation)
```typescript
// themes/providers/theme-provider.tsx
import type { ReactNode } from 'react'
import { createContext, useContext } from 'react'

type Theme = 'light' | 'dark'

type ThemeContextType = {
  theme: Theme
  toggleTheme: () => void
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined)

type ThemeProviderProps = {
  children: ReactNode
  initialTheme?: Theme
}

export const ThemeProvider = ({ children, initialTheme = 'light' }: ThemeProviderProps) => {
  const [theme, setTheme] = useState<Theme>(initialTheme)
  
  const toggleTheme = () => {
    setTheme(current => current === 'light' ? 'dark' : 'light')
  }
  
  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      <div className={theme === 'light' ? lightTheme : darkTheme}>
        {children}
      </div>
    </ThemeContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeContext)
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider')
  }
  return context
}
```

### Global Styles
Use globalStyle for application-wide styling.

#### ✅ Good (global styles)
```typescript
// themes/reset.css.ts
import { globalStyle } from '@vanilla-extract/css'

globalStyle('*', {
  margin: 0,
  padding: 0,
  boxSizing: 'border-box',
})

globalStyle('html, body', {
  fontFamily: 'system-ui, sans-serif',
  lineHeight: 1.5,
})

// themes/global.css.ts
import { globalStyle } from '@vanilla-extract/css'
import { colors } from './tokens/colors.css'

globalStyle('body', {
  backgroundColor: colors.background,
  color: colors.text,
})

globalStyle('a', {
  color: colors.primary,
  textDecoration: 'none',
})
```

## File Naming Conventions
- **Style files**: Always use `.css.ts` extension
- **Component files**: Use `.tsx` for React components
- **Type files**: Use `.ts` for type definitions
- **Directory names**: Use kebab-case

## Best Practices
- Keep theme tokens consistent across all variants
- Use semantic color names (primary, secondary) instead of literal colors (blue, red)
- Group related tokens together in separate files
- Use TypeScript for comprehensive type safety
- Follow immutable programming principles
- No usage of `let` keyword - use `const` only
- Avoid non-null assertion operator (`!`)